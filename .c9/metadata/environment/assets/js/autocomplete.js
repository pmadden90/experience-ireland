{"filter":false,"title":"autocomplete.js","tooltip":"/assets/js/autocomplete.js","undoManager":{"mark":15,"position":15,"stack":[[{"start":{"row":0,"column":0},"end":{"row":292,"column":0},"action":"remove","lines":["// This example uses the autocomplete feature of the Google Places API.","// It allows the user to find all hotels in a given place, within a given","// country. It then displays markers for all the hotels returned,","// with on-click details for each hotel.","","// This example requires the Places library. Include the libraries=places","// parameter when you first load the API. For example:","// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">","","var map, places, infoWindow;","var markers = [];","var autocomplete;","var countryRestrict = {'country': 'ie'};","var MARKER_PATH = 'https://developers.google.com/maps/documentation/javascript/images/marker_green';","var hostnameRegexp = new RegExp('^https?://.+?/');","","var countries = {","  'ie': {","    center: {lat: 53.425, lng: -7.943},","    zoom: 6.65,","    types: ['cafe']","  }","};","","var category = {","'acc': {","bounds: map.getBounds(),","types: ['lodging']","\t}, ","'caf': {","bounds: map.getBounds(),","types: ['cafe']","\t},","  'int': {","bounds: map.getBounds(),","types: ['point_of_interest']","\t}, ","'nat': {","bounds: map.getBounds(),","types: ['natural_features']","\t},","  'par': {","bounds: map.getBounds(),","types: ['park']","\t},","'pub': {","bounds: map.getBounds(),","types: ['bar']","\t}, ","'res': {","bounds: map.getBounds(),","types: ['restaurant']","\t}","};","","function initMap() {","  map = new google.maps.Map(document.getElementById('map'), {","    zoom: countries['ie'].zoom,","    center: countries['ie'].center,","    mapTypeControl: false,","    panControl: false,","    zoomControl: false,","    streetViewControl: false","  });","","  infoWindow = new google.maps.InfoWindow({","    content: document.getElementById('info-content')","  });","","  // Create the autocomplete object and associate it with the UI input control.","  // Restrict the search to the default country, and to place type \"cities\".","  autocomplete = new google.maps.places.Autocomplete(","      /** @type {!HTMLInputElement} */ (","          document.getElementById('autocomplete')), {","        types: ['(cities)'],","        componentRestrictions: countryRestrict","      });","  places = new google.maps.places.PlacesService(map);","","  autocomplete.addListener('place_changed', onPlaceChanged);","","  // Add a DOM event listener to react when the user selects a country.","  document.getElementById('country').addEventListener(","      'change', setAutocompleteCountry);","}","","// When the user selects a city, get the place details for the city and","// zoom the map in on the city.","function onPlaceChanged() {","  var place = autocomplete.getPlace();","  if (place.geometry) {","    map.panTo(place.geometry.location);","    map.setZoom(12);","    search();","  } else {","    document.getElementById('autocomplete').placeholder = 'Enter a town or city';","  }","}","","// Search for hotels in the selected city, within the viewport of the map.","function search() {","  var poiSearch = {","    bounds: map.getBounds(),","    types: ['point_of_interest']","  };","  ","  //var poiSearch = {"," // bounds: map.getBounds(),"," // types: ['point_of_interest']"," // };","","  places.nearbySearch(poiSearch, function(results, status) {","    if (status === google.maps.places.PlacesServiceStatus.OK) {","      clearResults();","      clearMarkers();","      // Create a marker for each p.o.i found, and","      // assign a letter of the alphabetic to each marker icon.","      for (var i = 0; i < results.length; i++) {","        var markerLetter = String.fromCharCode('a'.charCodeAt(0) + (i % 26));","        var markerIcon = MARKER_PATH + markerLetter + '.png';","        // Use marker animation to drop the icons incrementally on the map.","        markers[i] = new google.maps.Marker({","          position: results[i].geometry.location,","          animation: google.maps.Animation.DROP,","          icon: markerIcon","        });","        // If the user clicks a hotel marker, show the details of that hotel","        // in an info window.","        markers[i].placeResult = results[i];","        google.maps.event.addListener(markers[i], 'click', showInfoWindow);","        setTimeout(dropMarker(i), i * 300);","        addResult(results[i], i);","      }","    }","  });","  ","}","","function clearMarkers() {","  for (var i = 0; i < markers.length; i++) {","    if (markers[i]) {","      markers[i].setMap(null);","    }","  }","  markers = [];","}","","// Set the country restriction based on user input.","// Also center and zoom the map on the given country.","function setAutocompleteCountry() {","  var categories = document.getElementById('category').value;","  if (category == 'all') {","    autocomplete.setComponentRestrictions({'category': []});","    map.setCenter({lat: 13, lng: 0});","    map.setZoom(2);","  } else {","    autocomplete.setComponentRestrictions({'categories': category});","    map.setCenter(categories[category].center);","    map.setZoom(categories[category].zoom);","  }","  clearResults();","  clearMarkers();","}","","function dropMarker(i) {","  return function() {","    markers[i].setMap(map);","  };","}","","function addResult(result, i) {","  var results = document.getElementById('pointsOfInterest');","  var markerLetter = String.fromCharCode('a'.charCodeAt(0) + (i % 26));","  var markerIcon = MARKER_PATH + markerLetter + '.png';","","  var td = document.createElement('td');","  td.style.backgroundColor = (i % 2 === 0 ? '#F0F0F0' : '#FFFFFF');","  td.onclick = function() {","    google.maps.event.trigger(markers[i], 'click');","  };","","  var iconTr = document.createElement('tr');","  var nameTr = document.createElement('tr');","  var icon = document.createElement('img');","  icon.src = markerIcon;","  icon.setAttribute('class', 'placeIcon');","  icon.setAttribute('className', 'placeIcon');","  var name = document.createTextNode(result.name);","  iconTr.appendChild(icon);","  nameTr.appendChild(name);","  td.appendChild(iconTr);","  td.appendChild(nameTr);","  results.appendChild(td);","}","","/*function addPointOfInterest(result, i) {","  var results = document.getElementById('pointsOfInterest');","  var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));","  var markerIcon = MARKER_PATH + markerLetter + '.png';","","  var tr = document.createElement('tr');","  tr.style.backgroundColor = (i % 2 === 0 ? '#F0F0F0' : '#FFFFFF');","  tr.onclick = function() {","    google.maps.event.trigger(markers[i], 'click');","  };","","  var iconTd = document.createElement('td');","  var nameTd = document.createElement('td');","  var icon = document.createElement('img');","  icon.src = markerIcon;","  icon.setAttribute('class', 'placeIcon');","  icon.setAttribute('className', 'placeIcon');","  var name = document.createTextNode(result.name);","  iconTd.appendChild(icon);","  nameTd.appendChild(name);","  tr.appendChild(iconTd);","  tr.appendChild(nameTd);","  results.appendChild(tr);","}*/","","function clearResults() {","  var results = document.getElementById('results');","  while (results.childNodes[0]) {","    results.removeChild(results.childNodes[0]);","  }","}","","// Get the place details for a hotel. Show the information in an info window,","// anchored on the marker for the hotel that the user selected.","function showInfoWindow() {","  var marker = this;","  places.getDetails({placeId: marker.placeResult.place_id},","      function(place, status) {","        if (status !== google.maps.places.PlacesServiceStatus.OK) {","          return;","        }","        infoWindow.open(map, marker);","        buildIWContent(place);","      });","}","","// Load the place information into the HTML elements used by the info window.","function buildIWContent(place) {","  document.getElementById('iw-icon').innerHTML = '<img class=\"hotelIcon\" ' +","      'src=\"' + place.icon + '\"/>';","  document.getElementById('iw-url').innerHTML = '<b><a href=\"' + place.url +","      '\">' + place.name + '</a></b>';","  document.getElementById('iw-address').textContent = place.vicinity;","","  if (place.formatted_phone_number) {","    document.getElementById('iw-phone-row').style.display = '';","    document.getElementById('iw-phone').textContent =","        place.formatted_phone_number;","  } else {","    document.getElementById('iw-phone-row').style.display = 'none';","  }","","  // Assign a five-star rating to the hotel, using a black star ('&#10029;')","  // to indicate the rating the hotel has earned, and a white star ('&#10025;')","  // for the rating points not achieved.","  if (place.rating) {","    var ratingHtml = '';","    for (var i = 0; i < 5; i++) {","      if (place.rating < (i + 0.5)) {","        ratingHtml += '&#10025;';","      } else {","        ratingHtml += '&#10029;';","      }","    document.getElementById('iw-rating-row').style.display = '';","    document.getElementById('iw-rating').innerHTML = ratingHtml;","    }","  } else {","    document.getElementById('iw-rating-row').style.display = 'none';","  }","","  // The regexp isolates the first part of the URL (domain plus subdomain)","  // to give a short URL for displaying in the info window.","  if (place.website) {","    var fullUrl = place.website;","    var website = hostnameRegexp.exec(place.website);","    if (website === null) {","      website = 'http://' + place.website + '/';","      fullUrl = website;","    }","    document.getElementById('iw-website-row').style.display = '';","    document.getElementById('iw-website').textContent = website;","  } else {","    document.getElementById('iw-website-row').style.display = 'none';","  }","}","","/*---------------------------*/",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":80,"column":9},"action":"insert","lines":["var card = document.getElementById('pac-card');","  var input = document.getElementById('pac-input');","  var types = document.getElementById('type-selector');","  var strictBounds = document.getElementById('strict-bounds-selector');","","  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);","","  //var autocomplete = new google.maps.places.Autocomplete(input);","","  // Bind the map's bounds (viewport) property to the autocomplete object,","  // so that the autocomplete requests use the current map bounds for the","  // bounds option in the request.","  autocomplete.bindTo('bounds', map);","","  // Set the data fields to return when the user selects a place.","  autocomplete.setFields(","      ['address_components', 'geometry', 'icon', 'name']);","","  /*var infowindow = new google.maps.InfoWindow();","  var infowindowContent = document.getElementById('infowindow-content');","  infowindow.setContent(infowindowContent);","  var marker = new google.maps.Marker({","    map: map,","    anchorPoint: new google.maps.Point(0, -29)","  });","","  autocomplete.addListener('place_changed', function() {","    infowindow.close();","    marker.setVisible(false);","    var place = autocomplete.getPlace();","    if (!place.geometry) {","      // User entered the name of a Place that was not suggested and","      // pressed the Enter key, or the Place Details request failed.","      window.alert(\"No details available for input: '\" + place.name + \"'\");","      return;","    }","","    // If the place has a geometry, then present it on a map.","    if (place.geometry.viewport) {","      map.fitBounds(place.geometry.viewport);","    } else {","      map.setCenter(place.geometry.location);","      map.setZoom(15);","    }","    marker.setPosition(place.geometry.location);","    marker.setVisible(true);","","    var address = '';","    if (place.address_components) {","      address = [","        (place.address_components[0] && place.address_components[0].short_name || ''),","        (place.address_components[1] && place.address_components[1].short_name || ''),","        (place.address_components[2] && place.address_components[2].short_name || '')","      ].join(' ');","    }","","    infowindowContent.children['place-icon'].src = place.icon;","    infowindowContent.children['place-name'].textContent = place.name;","    infowindowContent.children['place-address'].textContent = address;","    infowindow.open(map, marker);","  });","","  // Sets a listener on a radio button to change the filter type on Places","  // Autocomplete.","  function setupClickListener(id, types) {","    var radioButton = document.getElementById(id);","    radioButton.addEventListener('click', function() {","      autocomplete.setTypes(types);","    });","  }","","  setupClickListener('changetype-all', []);","  setupClickListener('changetype-address', ['address']);","  setupClickListener('changetype-establishment', ['establishment']);","  setupClickListener('changetype-geocode', ['geocode']);","","  document.getElementById('use-strict-bounds')","      .addEventListener('click', function() {","        console.log('Checkbox clicked! New state=' + this.checked);","        autocomplete.setOptions({strictBounds: this.checked});","      });"],"id":3}],[{"start":{"row":24,"column":5},"end":{"row":24,"column":6},"action":"insert","lines":["*"],"id":4},{"start":{"row":24,"column":6},"end":{"row":24,"column":7},"action":"insert","lines":["/"]}],[{"start":{"row":5,"column":1},"end":{"row":5,"column":2},"action":"insert","lines":["/"],"id":5},{"start":{"row":5,"column":2},"end":{"row":5,"column":3},"action":"insert","lines":["/"]}],[{"start":{"row":0,"column":0},"end":{"row":80,"column":9},"action":"remove","lines":["var card = document.getElementById('pac-card');","  var input = document.getElementById('pac-input');","  var types = document.getElementById('type-selector');","  var strictBounds = document.getElementById('strict-bounds-selector');",""," // map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);","","  //var autocomplete = new google.maps.places.Autocomplete(input);","","  // Bind the map's bounds (viewport) property to the autocomplete object,","  // so that the autocomplete requests use the current map bounds for the","  // bounds option in the request.","  autocomplete.bindTo('bounds', map);","","  // Set the data fields to return when the user selects a place.","  autocomplete.setFields(","      ['address_components', 'geometry', 'icon', 'name']);","","  /*var infowindow = new google.maps.InfoWindow();","  var infowindowContent = document.getElementById('infowindow-content');","  infowindow.setContent(infowindowContent);","  var marker = new google.maps.Marker({","    map: map,","    anchorPoint: new google.maps.Point(0, -29)","  });*/","","  autocomplete.addListener('place_changed', function() {","    infowindow.close();","    marker.setVisible(false);","    var place = autocomplete.getPlace();","    if (!place.geometry) {","      // User entered the name of a Place that was not suggested and","      // pressed the Enter key, or the Place Details request failed.","      window.alert(\"No details available for input: '\" + place.name + \"'\");","      return;","    }","","    // If the place has a geometry, then present it on a map.","    if (place.geometry.viewport) {","      map.fitBounds(place.geometry.viewport);","    } else {","      map.setCenter(place.geometry.location);","      map.setZoom(15);","    }","    marker.setPosition(place.geometry.location);","    marker.setVisible(true);","","    var address = '';","    if (place.address_components) {","      address = [","        (place.address_components[0] && place.address_components[0].short_name || ''),","        (place.address_components[1] && place.address_components[1].short_name || ''),","        (place.address_components[2] && place.address_components[2].short_name || '')","      ].join(' ');","    }","","    infowindowContent.children['place-icon'].src = place.icon;","    infowindowContent.children['place-name'].textContent = place.name;","    infowindowContent.children['place-address'].textContent = address;","    infowindow.open(map, marker);","  });","","  // Sets a listener on a radio button to change the filter type on Places","  // Autocomplete.","  function setupClickListener(id, types) {","    var radioButton = document.getElementById(id);","    radioButton.addEventListener('click', function() {","      autocomplete.setTypes(types);","    });","  }","","  setupClickListener('changetype-all', []);","  setupClickListener('changetype-address', ['address']);","  setupClickListener('changetype-establishment', ['establishment']);","  setupClickListener('changetype-geocode', ['geocode']);","","  document.getElementById('use-strict-bounds')","      .addEventListener('click', function() {","        console.log('Checkbox clicked! New state=' + this.checked);","        autocomplete.setOptions({strictBounds: this.checked});","      });"],"id":6},{"start":{"row":0,"column":0},"end":{"row":90,"column":1},"action":"insert","lines":["// This example requires the Places library. Include the libraries=places","// parameter when you first load the API. For example:","// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">","","function initMap() {","  var map = new google.maps.Map(document.getElementById('map'), {","    center: {lat: 53.425, lng: -7.943},","    zoom: 7","  });","  var card = document.getElementById('pac-card');","  var input = document.getElementById('pac-input');","  var types = document.getElementById('type-selector');","  var strictBounds = document.getElementById('strict-bounds-selector');","","  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);","","  var autocomplete = new google.maps.places.Autocomplete(input);","","  // Bind the map's bounds (viewport) property to the autocomplete object,","  // so that the autocomplete requests use the current map bounds for the","  // bounds option in the request.","  autocomplete.bindTo('bounds', map);","","  // Set the data fields to return when the user selects a place.","  autocomplete.setFields(","      ['address_components', 'geometry', 'icon', 'name']);","","  var infowindow = new google.maps.InfoWindow();","  var infowindowContent = document.getElementById('infowindow-content');","  infowindow.setContent(infowindowContent);","  var marker = new google.maps.Marker({","    map: map,","    anchorPoint: new google.maps.Point(0, -29)","  });","","  autocomplete.addListener('place_changed', function() {","    infowindow.close();","    marker.setVisible(false);","    var place = autocomplete.getPlace();","    if (!place.geometry) {","      // User entered the name of a Place that was not suggested and","      // pressed the Enter key, or the Place Details request failed.","      window.alert(\"No details available for input: '\" + place.name + \"'\");","      return;","    }","","    // If the place has a geometry, then present it on a map.","    if (place.geometry.viewport) {","      map.fitBounds(place.geometry.viewport);","    } else {","      map.setCenter(place.geometry.location);","      map.setZoom(17);  // Why 17? Because it looks good.","    }","    marker.setPosition(place.geometry.location);","    marker.setVisible(true);","","    var address = '';","    if (place.address_components) {","      address = [","        (place.address_components[0] && place.address_components[0].short_name || ''),","        (place.address_components[1] && place.address_components[1].short_name || ''),","        (place.address_components[2] && place.address_components[2].short_name || '')","      ].join(' ');","    }","","    infowindowContent.children['place-icon'].src = place.icon;","    infowindowContent.children['place-name'].textContent = place.name;","    infowindowContent.children['place-address'].textContent = address;","    infowindow.open(map, marker);","  });","","  // Sets a listener on a radio button to change the filter type on Places","  // Autocomplete.","  function setupClickListener(id, types) {","    var radioButton = document.getElementById(id);","    radioButton.addEventListener('click', function() {","      autocomplete.setTypes(types);","    });","  }","","  setupClickListener('changetype-all', []);","  setupClickListener('changetype-address', ['address']);","  setupClickListener('changetype-establishment', ['establishment']);","  setupClickListener('changetype-geocode', ['geocode']);","","  document.getElementById('use-strict-bounds')","      .addEventListener('click', function() {","        console.log('Checkbox clicked! New state=' + this.checked);","        autocomplete.setOptions({strictBounds: this.checked});","      });","}"]}],[{"start":{"row":8,"column":5},"end":{"row":8,"column":6},"action":"insert","lines":["*"],"id":7}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":1},"action":"insert","lines":["/"],"id":8},{"start":{"row":4,"column":1},"end":{"row":4,"column":2},"action":"insert","lines":["*"]}],[{"start":{"row":8,"column":6},"end":{"row":8,"column":7},"action":"insert","lines":["/"],"id":9}],[{"start":{"row":14,"column":1},"end":{"row":14,"column":2},"action":"insert","lines":["/"],"id":10},{"start":{"row":14,"column":2},"end":{"row":14,"column":3},"action":"insert","lines":["/"]}],[{"start":{"row":90,"column":1},"end":{"row":90,"column":2},"action":"insert","lines":[";"],"id":11}],[{"start":{"row":90,"column":1},"end":{"row":90,"column":2},"action":"remove","lines":[";"],"id":12},{"start":{"row":90,"column":0},"end":{"row":90,"column":1},"action":"remove","lines":["}"]}],[{"start":{"row":90,"column":0},"end":{"row":90,"column":1},"action":"insert","lines":["}"],"id":13}],[{"start":{"row":8,"column":6},"end":{"row":8,"column":7},"action":"remove","lines":["/"],"id":14},{"start":{"row":8,"column":5},"end":{"row":8,"column":6},"action":"remove","lines":["*"]}],[{"start":{"row":7,"column":10},"end":{"row":7,"column":11},"action":"remove","lines":["7"],"id":15}],[{"start":{"row":7,"column":10},"end":{"row":7,"column":11},"action":"insert","lines":["6"],"id":16},{"start":{"row":7,"column":11},"end":{"row":7,"column":12},"action":"insert","lines":["."]},{"start":{"row":7,"column":12},"end":{"row":7,"column":13},"action":"insert","lines":["6"]},{"start":{"row":7,"column":13},"end":{"row":7,"column":14},"action":"insert","lines":["5"]}],[{"start":{"row":4,"column":1},"end":{"row":4,"column":2},"action":"remove","lines":["*"],"id":17},{"start":{"row":4,"column":0},"end":{"row":4,"column":1},"action":"remove","lines":["/"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":4,"column":0},"end":{"row":4,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1562852435915,"hash":"e091327358f3e198a4fcdb77817f039a177d14f4"}