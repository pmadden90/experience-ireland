{"changed":true,"filter":false,"title":"autocomplete.js","tooltip":"/assets/js/autocomplete.js","value":"//Edited from Google Places API documentation\n\nfunction initMap() {\n  var map = new google.maps.Map(document.getElementById('map'), {\n    center: {lat: 53.425, lng: -7.943},\n    zoom: 6.65\n  });\n  var card = document.getElementById('pac-card');\n  var input = document.getElementById('pac-input');\n  var types = document.getElementById('type-selector');\n  var strictBounds = document.getElementById('strict-bounds-selector');\n\n // map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);\n\n  var autocomplete = new google.maps.places.Autocomplete(input);\n\n  // Bind the map's bounds (viewport) property to the autocomplete object,\n  // so that the autocomplete requests use the current map bounds for the\n  // bounds option in the request.\n  autocomplete.bindTo('bounds', map);\n\n  // Set the data fields to return when the user selects a place.\n  autocomplete.setFields(\n      ['address_components', 'geometry', 'icon', 'name']);\n\n  var infowindow = new google.maps.InfoWindow();\n  var infowindowContent = document.getElementById('infowindow-content');\n  infowindow.setContent(infowindowContent);\n  var marker = new google.maps.Marker({\n    map: map,\n    anchorPoint: new google.maps.Point(0, -29)\n  });\n\n  autocomplete.addListener('place_changed', function() {\n    infowindow.close();\n    marker.setVisible(false);\n    var place = autocomplete.getPlace();\n    if (!place.geometry) {\n      // User entered the name of a Place that was not suggested and\n      // pressed the Enter key, or the Place Details request failed.\n      window.alert(\"No details available for input: '\" + place.name + \"'\");\n      return;\n    }\n\n    // If the place has a geometry, then present it on a map.\n    if (place.geometry.viewport) {\n      map.fitBounds(place.geometry.viewport);\n    } else {\n      map.setCenter(place.geometry.location);\n      map.setZoom(17);  // Why 17? Because it looks good.\n    }\n    marker.setPosition(place.geometry.location);\n    marker.setVisible(true);\n\n    var address = '';\n    if (place.address_components) {\n      address = [\n        (place.address_components[0] && place.address_components[0].short_name || ''),\n        (place.address_components[1] && place.address_components[1].short_name || ''),\n        (place.address_components[2] && place.address_components[2].short_name || '')\n      ].join(' ');\n    }\n\n    infowindowContent.children['place-icon'].src = place.icon;\n    infowindowContent.children['place-name'].textContent = place.name;\n    infowindowContent.children['place-address'].textContent = address;\n    infowindow.open(map, marker);\n  });\n\n  // Sets a listener on a radio button to change the filter type on Places\n  // Autocomplete.\n  function setupClickListener(id, types) {\n    var radioButton = document.getElementById(id);\n    radioButton.addEventListener('click', function() {\n      autocomplete.setTypes(types);\n    });\n  }\n\n  setupClickListener('changetype-all', []);\n  setupClickListener('changetype-address', ['address']);\n  setupClickListener('changetype-establishment', ['establishment']);\n  setupClickListener('changetype-geocode', ['geocode']);\n\n  document.getElementById('use-strict-bounds')\n      .addEventListener('click', function() {\n        console.log('Checkbox clicked! New state=' + this.checked);\n        autocomplete.setOptions({strictBounds: this.checked});\n      });\n}","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":2,"column":91},"action":"remove","lines":["// This example requires the Places library. Include the libraries=places","// parameter when you first load the API. For example:","// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">"],"id":2},{"start":{"row":0,"column":0},"end":{"row":0,"column":45},"action":"insert","lines":["//Edited from Google Places API documentation"]}]]},"ace":{"folds":[],"scrolltop":180,"scrollleft":0,"selection":{"start":{"row":0,"column":45},"end":{"row":0,"column":45},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1562852435930}