{"changed":true,"filter":false,"title":"hotels.js","tooltip":"/assets/js/hotels.js","value":"var map, places, infoWindow;\nvar markers = [];\nvar autocomplete;\nvar countryRestrict = { 'country': 'ie' };\nvar MARKER_PATH = 'https://developers.google.com/maps/documentation/javascript/images/marker_green';\nvar hostnameRegexp = new RegExp('^https?://.+?/');\n\nvar countries = {\n  'ie': {\n    center: { lat: 53.425, lng: -7.943 },\n    zoom: 6.65\n  }\n};\n\nvar category = {\n  'acc': {\n    bounds: map.getBounds(),\n    types: ['lodging']\n  }/*,\n  'caf': {\n    bounds: map.getBounds(),\n    types: ['cafe']\n  },\n  'int': {\n    bounds: map.getBounds(),\n    types: ['point_of_interest']\n  },\n  'nat': {\n    bounds: map.getBounds(),\n    types: ['natural_features']\n  },\n  'par': {\n    bounds: map.getBounds(),\n    types: ['park']\n  },\n  'pub': {\n    bounds: map.getBounds(),\n    types: ['bar']\n  },\n  'res': {\n    bounds: map.getBounds(),\n    types: ['restaurant']\n  }*/\n};\n\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById('map'), {\n    zoom: countries['ie'].zoom,\n    center: countries['ie'].center,\n    mapTypeControl: false,\n    panControl: false,\n    zoomControl: false,\n    streetViewControl: false\n  });\n\n        infoWindow = new google.maps.InfoWindow({\n          content: document.getElementById('info-content')\n        });\n\n        // Create the autocomplete object and associate it with the UI input control.\n        // Restrict the search to the default country, and to place type \"cities\".\n        autocomplete = new google.maps.places.Autocomplete(\n            /** @type {!HTMLInputElement} */ (\n                document.getElementById('autocompleteHotels')), {\n              types: ['(cities)'],\n              componentRestrictions: countryRestrict\n            });\n        places = new google.maps.places.PlacesService(map);\n\n        autocomplete.addListener('place_changed', onPlaceChanged);\n\n        // Add a DOM event listener to react when the user selects a country.\n        document.getElementById('country').addEventListener(\n            'change', setAutocompleteCountry);\n      }\n\n      // When the user selects a city, get the place details for the city and\n      // zoom the map in on the city.\n      function onPlaceChanged() {\n        var place = autocomplete.getPlace();\n        if (place.geometry) {\n          map.panTo(place.geometry.location);\n          map.setZoom(12);\n          search();\n        } else {\n          document.getElementById('autocompleteHotels').placeholder = 'Enter a city';\n        }\n      }\n\n      // Search for hotels in the selected city, within the viewport of the map.\n      function search() {\n        var search = {\n          bounds: map.getBounds(),\n          types: ['lodging']\n        };\n\n        places.nearbySearch(search, function(results, status) {\n          if (status === google.maps.places.PlacesServiceStatus.OK) {\n            clearResults();\n            clearMarkers();\n            // Create a marker for each hotel found, and\n            // assign a letter of the alphabetic to each marker icon.\n            for (var i = 0; i < results.length; i++) {\n              var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));\n              var markerIcon = MARKER_PATH + markerLetter + '.png';\n              // Use marker animation to drop the icons incrementally on the map.\n              markers[i] = new google.maps.Marker({\n                position: results[i].geometry.location,\n                animation: google.maps.Animation.DROP,\n                icon: markerIcon\n              });\n              // If the user clicks a hotel marker, show the details of that hotel\n              // in an info window.\n              markers[i].placeResult = results[i];\n              google.maps.event.addListener(markers[i], 'click', showInfoWindow);\n              setTimeout(dropMarker(i), i * 100);\n              addResult(results[i], i);\n            }\n          }\n        });\n      }\n\n      function clearMarkers() {\n        for (var i = 0; i < markers.length; i++) {\n          if (markers[i]) {\n            markers[i].setMap(null);\n          }\n        }\n        markers = [];\n      }\n\n      // Set the country restriction based on user input.\n      // Also center and zoom the map on the given country.\n      function setAutocompleteCountry() {\n        var country = document.getElementById('country').value;\n        if (country == 'all') {\n          autocomplete.setComponentRestrictions({'country': []});\n          map.setCenter({lat: 15, lng: 0});\n          map.setZoom(2);\n        } else {\n          autocomplete.setComponentRestrictions({'country': country});\n          map.setCenter(countries[country].center);\n          map.setZoom(countries[country].zoom);\n        }\n        clearResults();\n        clearMarkers();\n      }\n\n      function dropMarker(i) {\n        return function() {\n          markers[i].setMap(map);\n        };\n      }\n\n      function addResult(result, i) {\n        var results = document.getElementById('results');\n        var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));\n        var markerIcon = MARKER_PATH + markerLetter + '.png';\n\n        var tr = document.createElement('tr');\n        tr.style.backgroundColor = (i % 2 === 0 ? '#F0F0F0' : '#FFFFFF');\n        tr.onclick = function() {\n          google.maps.event.trigger(markers[i], 'click');\n        };\n\n        var iconTd = document.createElement('td');\n        var nameTd = document.createElement('td');\n        var icon = document.createElement('img');\n        icon.src = markerIcon;\n        icon.setAttribute('class', 'placeIcon');\n        icon.setAttribute('className', 'placeIcon');\n        var name = document.createTextNode(result.name);\n        iconTd.appendChild(icon);\n        nameTd.appendChild(name);\n        tr.appendChild(iconTd);\n        tr.appendChild(nameTd);\n        results.appendChild(tr);\n      }\n\n      function clearResults() {\n        var results = document.getElementById('results');\n        while (results.childNodes[0]) {\n          results.removeChild(results.childNodes[0]);\n        }\n      }\n\n      // Get the place details for a hotel. Show the information in an info window,\n      // anchored on the marker for the hotel that the user selected.\n      function showInfoWindow() {\n        var marker = this;\n        places.getDetails({placeId: marker.placeResult.place_id},\n            function(place, status) {\n              if (status !== google.maps.places.PlacesServiceStatus.OK) {\n                return;\n              }\n              infoWindow.open(map, marker);\n              buildIWContent(place);\n            });\n      }\n\n      // Load the place information into the HTML elements used by the info window.\n      function buildIWContent(place) {\n        document.getElementById('iw-icon').innerHTML = '<img class=\"hotelIcon\" ' +\n            'src=\"' + place.icon + '\"/>';\n        document.getElementById('iw-url').innerHTML = '<b><a href=\"' + place.url +\n            '\">' + place.name + '</a></b>';\n        document.getElementById('iw-address').textContent = place.vicinity;\n\n        if (place.formatted_phone_number) {\n          document.getElementById('iw-phone-row').style.display = '';\n          document.getElementById('iw-phone').textContent =\n              place.formatted_phone_number;\n        } else {\n          document.getElementById('iw-phone-row').style.display = 'none';\n        }\n\n        // Assign a five-star rating to the hotel, using a black star ('&#10029;')\n        // to indicate the rating the hotel has earned, and a white star ('&#10025;')\n        // for the rating points not achieved.\n        if (place.rating) {\n          var ratingHtml = '';\n          for (var i = 0; i < 5; i++) {\n            if (place.rating < (i + 0.5)) {\n              ratingHtml += '&#10025;';\n            } else {\n              ratingHtml += '&#10029;';\n            }\n          document.getElementById('iw-rating-row').style.display = '';\n          document.getElementById('iw-rating').innerHTML = ratingHtml;\n          }\n        } else {\n          document.getElementById('iw-rating-row').style.display = 'none';\n        }\n\n        // The regexp isolates the first part of the URL (domain plus subdomain)\n        // to give a short URL for displaying in the info window.\n        if (place.website) {\n          var fullUrl = place.website;\n          var website = hostnameRegexp.exec(place.website);\n          if (website === null) {\n            website = 'http://' + place.website + '/';\n            fullUrl = website;\n          }\n          document.getElementById('iw-website-row').style.display = '';\n          document.getElementById('iw-website').textContent = website;\n        } else {\n          document.getElementById('iw-website-row').style.display = 'none';\n        }\n      }","undoManager":{"mark":2,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":265,"column":7},"action":"insert","lines":["var map, places, infoWindow;","      var markers = [];","      var autocomplete;","      var countryRestrict = {'country': 'us'};","      var MARKER_PATH = 'https://developers.google.com/maps/documentation/javascript/images/marker_green';","      var hostnameRegexp = new RegExp('^https?://.+?/');","","      var countries = {","        'au': {","          center: {lat: -25.3, lng: 133.8},","          zoom: 4","        },","        'br': {","          center: {lat: -14.2, lng: -51.9},","          zoom: 3","        },","        'ca': {","          center: {lat: 62, lng: -110.0},","          zoom: 3","        },","        'fr': {","          center: {lat: 46.2, lng: 2.2},","          zoom: 5","        },","        'de': {","          center: {lat: 51.2, lng: 10.4},","          zoom: 5","        },","        'mx': {","          center: {lat: 23.6, lng: -102.5},","          zoom: 4","        },","        'nz': {","          center: {lat: -40.9, lng: 174.9},","          zoom: 5","        },","        'it': {","          center: {lat: 41.9, lng: 12.6},","          zoom: 5","        },","        'za': {","          center: {lat: -30.6, lng: 22.9},","          zoom: 5","        },","        'es': {","          center: {lat: 40.5, lng: -3.7},","          zoom: 5","        },","        'pt': {","          center: {lat: 39.4, lng: -8.2},","          zoom: 6","        },","        'us': {","          center: {lat: 37.1, lng: -95.7},","          zoom: 3","        },","        'uk': {","          center: {lat: 54.8, lng: -4.6},","          zoom: 5","        }","      };","","      function initMap() {","        map = new google.maps.Map(document.getElementById('map'), {","          zoom: countries['us'].zoom,","          center: countries['us'].center,","          mapTypeControl: false,","          panControl: false,","          zoomControl: false,","          streetViewControl: false","        });","","        infoWindow = new google.maps.InfoWindow({","          content: document.getElementById('info-content')","        });","","        // Create the autocomplete object and associate it with the UI input control.","        // Restrict the search to the default country, and to place type \"cities\".","        autocomplete = new google.maps.places.Autocomplete(","            /** @type {!HTMLInputElement} */ (","                document.getElementById('autocomplete')), {","              types: ['(cities)'],","              componentRestrictions: countryRestrict","            });","        places = new google.maps.places.PlacesService(map);","","        autocomplete.addListener('place_changed', onPlaceChanged);","","        // Add a DOM event listener to react when the user selects a country.","        document.getElementById('country').addEventListener(","            'change', setAutocompleteCountry);","      }","","      // When the user selects a city, get the place details for the city and","      // zoom the map in on the city.","      function onPlaceChanged() {","        var place = autocomplete.getPlace();","        if (place.geometry) {","          map.panTo(place.geometry.location);","          map.setZoom(15);","          search();","        } else {","          document.getElementById('autocomplete').placeholder = 'Enter a city';","        }","      }","","      // Search for hotels in the selected city, within the viewport of the map.","      function search() {","        var search = {","          bounds: map.getBounds(),","          types: ['lodging']","        };","","        places.nearbySearch(search, function(results, status) {","          if (status === google.maps.places.PlacesServiceStatus.OK) {","            clearResults();","            clearMarkers();","            // Create a marker for each hotel found, and","            // assign a letter of the alphabetic to each marker icon.","            for (var i = 0; i < results.length; i++) {","              var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));","              var markerIcon = MARKER_PATH + markerLetter + '.png';","              // Use marker animation to drop the icons incrementally on the map.","              markers[i] = new google.maps.Marker({","                position: results[i].geometry.location,","                animation: google.maps.Animation.DROP,","                icon: markerIcon","              });","              // If the user clicks a hotel marker, show the details of that hotel","              // in an info window.","              markers[i].placeResult = results[i];","              google.maps.event.addListener(markers[i], 'click', showInfoWindow);","              setTimeout(dropMarker(i), i * 100);","              addResult(results[i], i);","            }","          }","        });","      }","","      function clearMarkers() {","        for (var i = 0; i < markers.length; i++) {","          if (markers[i]) {","            markers[i].setMap(null);","          }","        }","        markers = [];","      }","","      // Set the country restriction based on user input.","      // Also center and zoom the map on the given country.","      function setAutocompleteCountry() {","        var country = document.getElementById('country').value;","        if (country == 'all') {","          autocomplete.setComponentRestrictions({'country': []});","          map.setCenter({lat: 15, lng: 0});","          map.setZoom(2);","        } else {","          autocomplete.setComponentRestrictions({'country': country});","          map.setCenter(countries[country].center);","          map.setZoom(countries[country].zoom);","        }","        clearResults();","        clearMarkers();","      }","","      function dropMarker(i) {","        return function() {","          markers[i].setMap(map);","        };","      }","","      function addResult(result, i) {","        var results = document.getElementById('results');","        var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));","        var markerIcon = MARKER_PATH + markerLetter + '.png';","","        var tr = document.createElement('tr');","        tr.style.backgroundColor = (i % 2 === 0 ? '#F0F0F0' : '#FFFFFF');","        tr.onclick = function() {","          google.maps.event.trigger(markers[i], 'click');","        };","","        var iconTd = document.createElement('td');","        var nameTd = document.createElement('td');","        var icon = document.createElement('img');","        icon.src = markerIcon;","        icon.setAttribute('class', 'placeIcon');","        icon.setAttribute('className', 'placeIcon');","        var name = document.createTextNode(result.name);","        iconTd.appendChild(icon);","        nameTd.appendChild(name);","        tr.appendChild(iconTd);","        tr.appendChild(nameTd);","        results.appendChild(tr);","      }","","      function clearResults() {","        var results = document.getElementById('results');","        while (results.childNodes[0]) {","          results.removeChild(results.childNodes[0]);","        }","      }","","      // Get the place details for a hotel. Show the information in an info window,","      // anchored on the marker for the hotel that the user selected.","      function showInfoWindow() {","        var marker = this;","        places.getDetails({placeId: marker.placeResult.place_id},","            function(place, status) {","              if (status !== google.maps.places.PlacesServiceStatus.OK) {","                return;","              }","              infoWindow.open(map, marker);","              buildIWContent(place);","            });","      }","","      // Load the place information into the HTML elements used by the info window.","      function buildIWContent(place) {","        document.getElementById('iw-icon').innerHTML = '<img class=\"hotelIcon\" ' +","            'src=\"' + place.icon + '\"/>';","        document.getElementById('iw-url').innerHTML = '<b><a href=\"' + place.url +","            '\">' + place.name + '</a></b>';","        document.getElementById('iw-address').textContent = place.vicinity;","","        if (place.formatted_phone_number) {","          document.getElementById('iw-phone-row').style.display = '';","          document.getElementById('iw-phone').textContent =","              place.formatted_phone_number;","        } else {","          document.getElementById('iw-phone-row').style.display = 'none';","        }","","        // Assign a five-star rating to the hotel, using a black star ('&#10029;')","        // to indicate the rating the hotel has earned, and a white star ('&#10025;')","        // for the rating points not achieved.","        if (place.rating) {","          var ratingHtml = '';","          for (var i = 0; i < 5; i++) {","            if (place.rating < (i + 0.5)) {","              ratingHtml += '&#10025;';","            } else {","              ratingHtml += '&#10029;';","            }","          document.getElementById('iw-rating-row').style.display = '';","          document.getElementById('iw-rating').innerHTML = ratingHtml;","          }","        } else {","          document.getElementById('iw-rating-row').style.display = 'none';","        }","","        // The regexp isolates the first part of the URL (domain plus subdomain)","        // to give a short URL for displaying in the info window.","        if (place.website) {","          var fullUrl = place.website;","          var website = hostnameRegexp.exec(place.website);","          if (website === null) {","            website = 'http://' + place.website + '/';","            fullUrl = website;","          }","          document.getElementById('iw-website-row').style.display = '';","          document.getElementById('iw-website').textContent = website;","        } else {","          document.getElementById('iw-website-row').style.display = 'none';","        }","      }"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":70,"column":11},"action":"remove","lines":["var map, places, infoWindow;","      var markers = [];","      var autocomplete;","      var countryRestrict = {'country': 'us'};","      var MARKER_PATH = 'https://developers.google.com/maps/documentation/javascript/images/marker_green';","      var hostnameRegexp = new RegExp('^https?://.+?/');","","      var countries = {","        'au': {","          center: {lat: -25.3, lng: 133.8},","          zoom: 4","        },","        'br': {","          center: {lat: -14.2, lng: -51.9},","          zoom: 3","        },","        'ca': {","          center: {lat: 62, lng: -110.0},","          zoom: 3","        },","        'fr': {","          center: {lat: 46.2, lng: 2.2},","          zoom: 5","        },","        'de': {","          center: {lat: 51.2, lng: 10.4},","          zoom: 5","        },","        'mx': {","          center: {lat: 23.6, lng: -102.5},","          zoom: 4","        },","        'nz': {","          center: {lat: -40.9, lng: 174.9},","          zoom: 5","        },","        'it': {","          center: {lat: 41.9, lng: 12.6},","          zoom: 5","        },","        'za': {","          center: {lat: -30.6, lng: 22.9},","          zoom: 5","        },","        'es': {","          center: {lat: 40.5, lng: -3.7},","          zoom: 5","        },","        'pt': {","          center: {lat: 39.4, lng: -8.2},","          zoom: 6","        },","        'us': {","          center: {lat: 37.1, lng: -95.7},","          zoom: 3","        },","        'uk': {","          center: {lat: 54.8, lng: -4.6},","          zoom: 5","        }","      };","","      function initMap() {","        map = new google.maps.Map(document.getElementById('map'), {","          zoom: countries['us'].zoom,","          center: countries['us'].center,","          mapTypeControl: false,","          panControl: false,","          zoomControl: false,","          streetViewControl: false","        });"],"id":2},{"start":{"row":0,"column":0},"end":{"row":53,"column":5},"action":"insert","lines":["var map, places, infoWindow;","var markers = [];","var autocomplete;","var countryRestrict = { 'country': 'ie' };","var MARKER_PATH = 'https://developers.google.com/maps/documentation/javascript/images/marker_green';","var hostnameRegexp = new RegExp('^https?://.+?/');","","var countries = {","  'ie': {","    center: { lat: 53.425, lng: -7.943 },","    zoom: 6.65","  }","};","","var category = {","  'acc': {","    bounds: map.getBounds(),","    types: ['lodging']","  }/*,","  'caf': {","    bounds: map.getBounds(),","    types: ['cafe']","  },","  'int': {","    bounds: map.getBounds(),","    types: ['point_of_interest']","  },","  'nat': {","    bounds: map.getBounds(),","    types: ['natural_features']","  },","  'par': {","    bounds: map.getBounds(),","    types: ['park']","  },","  'pub': {","    bounds: map.getBounds(),","    types: ['bar']","  },","  'res': {","    bounds: map.getBounds(),","    types: ['restaurant']","  }*/","};","","function initMap() {","  map = new google.maps.Map(document.getElementById('map'), {","    zoom: countries['ie'].zoom,","    center: countries['ie'].center,","    mapTypeControl: false,","    panControl: false,","    zoomControl: false,","    streetViewControl: false","  });"]}],[{"start":{"row":63,"column":53},"end":{"row":63,"column":54},"action":"insert","lines":["H"],"id":3},{"start":{"row":63,"column":54},"end":{"row":63,"column":55},"action":"insert","lines":["o"]},{"start":{"row":63,"column":55},"end":{"row":63,"column":56},"action":"insert","lines":["t"]},{"start":{"row":63,"column":56},"end":{"row":63,"column":57},"action":"insert","lines":["e"]},{"start":{"row":63,"column":57},"end":{"row":63,"column":58},"action":"insert","lines":["l"]},{"start":{"row":63,"column":58},"end":{"row":63,"column":59},"action":"insert","lines":["s"]}],[{"start":{"row":82,"column":23},"end":{"row":82,"column":24},"action":"remove","lines":["5"],"id":4}],[{"start":{"row":82,"column":23},"end":{"row":82,"column":24},"action":"insert","lines":["2"],"id":5}],[{"start":{"row":85,"column":47},"end":{"row":85,"column":48},"action":"insert","lines":["H"],"id":6},{"start":{"row":85,"column":48},"end":{"row":85,"column":49},"action":"insert","lines":["o"]},{"start":{"row":85,"column":49},"end":{"row":85,"column":50},"action":"insert","lines":["t"]},{"start":{"row":85,"column":50},"end":{"row":85,"column":51},"action":"insert","lines":["e"]},{"start":{"row":85,"column":51},"end":{"row":85,"column":52},"action":"insert","lines":["l"]},{"start":{"row":85,"column":52},"end":{"row":85,"column":53},"action":"insert","lines":["s"]}]]},"ace":{"folds":[],"scrolltop":1020,"scrollleft":0,"selection":{"start":{"row":88,"column":0},"end":{"row":88,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":24,"state":"comment","mode":"ace/mode/javascript"}},"timestamp":1563296287102}