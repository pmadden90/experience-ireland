{"changed":true,"filter":false,"title":"places2.js","tooltip":"/assets/js/places2.js","value":"//Edited from Google Places API documentation\nvar map, places, infoWindow;\nvar markers = [];\nvar autocomplete;\nvar countryRestrict = { 'country': 'ie' };\nvar MARKER_PATH = 'https://developers.google.com/maps/documentation/javascript/images/marker_green';\nvar hostnameRegexp = new RegExp('^https?://.+?/');\n\nvar countries = {\n  'ie': {\n    center: { lat: 53.425, lng: -7.943 },\n    zoom: 6.65\n  }\n};\n\nvar category = {\n  'acc': {\n    bounds: map.fitBounds(),\n    types: ['lodging']\n  }/*,\n  'caf': {\n    bounds: map.getBounds(),\n    types: ['cafe']\n  },\n  'int': {\n    bounds: map.getBounds(),\n    types: ['point_of_interest']\n  },\n  'nat': {\n    bounds: map.getBounds(),\n    types: ['natural_features']\n  },\n  'par': {\n    bounds: map.getBounds(),\n    types: ['park']\n  },\n  'pub': {\n    bounds: map.getBounds(),\n    types: ['bar']\n  },\n  'res': {\n    bounds: map.getBounds(),\n    types: ['restaurant']\n  }*/\n};\n\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById('map'), {\n    zoom: countries['ie'].zoom,\n    center: countries['ie'].center,\n    mapTypeControl: false,\n    panControl: false,\n    zoomControl: false,\n    streetViewControl: false\n  });\n\n\n  infowindow = new google.maps.InfoWindow({\n    content: '<div><strong>' + place.name + '</strong><br>' + 'Place ID: ' + place.place_id + '<br>' + type + 'br' + place.formatted_address + '</div>' + '<div style=\"border-top: 1px solid rgb(204, 204, 204); margin-top: 9px; padding: 6px; font-size: 13px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; font-family: Roboto, Arial;\"><a href=\"' + place.url + '\" target=\"_blank\" rel=\"noopener\" style=\"cursor: pointer; color: rgb(66, 127, 237); text-decoration: none;\">Find out more</a></div>' +\n      '<div>API version ' + google.maps.version + '</div>'\n  });\n\n  // infoWindow = new google.maps.InfoWindow({\n  // content: document.getElementById('info-content')\n  //});\n\n  // Create the autocomplete object and associate it with the UI input control.\n  // Restrict the search to the default country, and to place type \"cities\".\n  autocomplete = new google.maps.places.Autocomplete(\n    /** @type {!HTMLInputElement} */\n    (\n      document.getElementById('autocomplete')), {\n      types: ['(cities)'],\n      componentRestrictions: countryRestrict\n    });\n  places = new google.maps.places.PlacesService(map);\n\n  autocomplete.addListener('place_changed', onPlaceChanged);\n\n  // Add a DOM event listener to react when the user selects a country.\n  document.getElementById('country').addEventListener(\n    'change', setAutocompleteCountry);\n}\n\n// When the user selects a city, get the place details for the city and\n// zoom the map in on the city.\nfunction onPlaceChanged() {\n  var place = autocomplete.getPlace();\n  if (place.geometry) {\n    map.panTo(place.geometry.location);\n    map.setZoom(16);\n   // search();\n  }\n  else {\n    document.getElementById('autocomplete').placeholder = 'Enter a town or city';\n  }\n}\n\n\n\n// Search for hotels in the selected city, within the viewport of the map.\nfunction search(lodging) {\n  var search = {\n    bounds: map.getBounds(),\n    types: ['lodging']\n  };\n\n  places.nearbySearch(search, function(results, status) {\n    if (status === google.maps.places.PlacesServiceStatus.OK) {\n      clearResults();\n      clearMarkers();\n      // Create a marker for each hotel found, and\n      // assign a letter of the alphabetic to each marker icon.\n      for (var i = 0; i < results.length; i++) {\n        var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));\n        var markerIcon = MARKER_PATH + markerLetter + '.png';\n        // Use marker animation to drop the icons incrementally on the map.\n        markers[i] = new google.maps.Marker({\n          position: results[i].geometry.location,\n          animation: google.maps.Animation.DROP,\n          icon: markerIcon\n        });\n        // If the user clicks a hotel marker, show the details of that hotel\n        // in an info window.\n        markers[i].placeResult = results[i];\n        google.maps.event.addListener(markers[i], 'click', showInfoWindow);\n        setTimeout(dropMarker(i), i * 100);\n        addResult(results[i], i);\n      }\n    }\n  });\n}\n\nfunction search(bar) {\n  var search = {\n    bounds: map.getBounds(),\n    types: ['bar']\n  };\n\n  places.nearbySearch(search, function(results, status) {\n    if (status === google.maps.places.PlacesServiceStatus.OK) {\n      clearResults();\n      clearMarkers();\n      // Create a marker for each hotel found, and\n      // assign a letter of the alphabetic to each marker icon.\n      for (var i = 0; i < results.length; i++) {\n        var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));\n        var markerIcon = MARKER_PATH + markerLetter + '.png';\n        // Use marker animation to drop the icons incrementally on the map.\n        markers[i] = new google.maps.Marker({\n          position: results[i].geometry.location,\n          animation: google.maps.Animation.DROP,\n          icon: markerIcon\n        });\n        // If the user clicks a hotel marker, show the details of that hotel\n        // in an info window.\n        markers[i].placeResult = results[i];\n        google.maps.event.addListener(markers[i], 'click', showInfoWindow);\n        setTimeout(dropMarker(i), i * 100);\n        addResult(results[i], i);\n      }\n    }\n  });\n}\n\nfunction search(restaurant) {\n  var search = {\n    bounds: map.getBounds(),\n    types: ['restaurant']\n  };\n\n  places.nearbySearch(search, function(results, status) {\n    if (status === google.maps.places.PlacesServiceStatus.OK) {\n      clearResults();\n      clearMarkers();\n      // Create a marker for each hotel found, and\n      // assign a letter of the alphabetic to each marker icon.\n      for (var i = 0; i < results.length; i++) {\n        var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));\n        var markerIcon = MARKER_PATH + markerLetter + '.png';\n        // Use marker animation to drop the icons incrementally on the map.\n        markers[i] = new google.maps.Marker({\n          position: results[i].geometry.location,\n          animation: google.maps.Animation.DROP,\n          icon: markerIcon\n        });\n        // If the user clicks a hotel marker, show the details of that hotel\n        // in an info window.\n        markers[i].placeResult = results[i];\n        google.maps.event.addListener(markers[i], 'click', showInfoWindow);\n        setTimeout(dropMarker(i), i * 100);\n        addResult(results[i], i);\n      }\n    }\n  });\n}\n\nfunction clearMarkers() {\n  for (var i = 0; i < markers.length; i++) {\n    if (markers[i]) {\n      markers[i].setMap(null);\n    }\n  }\n  markers = [];\n}\n\n// Set the country restriction based on user input.\n// Also center and zoom the map on the given country.\nfunction setAutocompleteCountry() {\n  var categories = document.getElementById('category').value;\n  if (category == 'all') {\n    autocomplete.setComponentRestrictions({'category': []});\n    map.setCenter({lat: 13, lng: 0});\n    map.setZoom(2);\n  } else {\n    autocomplete.setComponentRestrictions({'categories': category});\n    map.setCenter(categories[category].center);\n    map.setZoom(categories[category].zoom);\n  }\n  clearResults();\n  clearMarkers();\n}\n\nfunction dropMarker(i) {\n  return function() {\n    markers[i].setMap(map);\n  };\n}\n\nfunction addResult(result, i) {\n  var results = document.getElementById('hotelResults');\n  var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));\n  var markerIcon = MARKER_PATH + markerLetter + '.png';\n\n  var tr = document.createElement('tr');\n  tr.style.backgroundColor = (i % 2 === 0 ? '#F0F0F0' : '#FFFFFF');\n  tr.onclick = function() {\n    google.maps.event.trigger(markers[i], 'click');\n  };\n\n  var iconTd = document.createElement('td');\n  var nameTd = document.createElement('td');\n  var icon = document.createElement('img');\n  icon.src = markerIcon;\n  icon.setAttribute('class', 'placeIcon');\n  icon.setAttribute('className', 'placeIcon');\n  var name = document.createTextNode(result.name);\n  iconTd.appendChild(icon);\n  nameTd.appendChild(name);\n  tr.appendChild(iconTd);\n  tr.appendChild(nameTd);\n  results.appendChild(tr);\n}\n\nfunction clearResults() {\n  var results = document.getElementById('hotelResults');\n  while (results.childNodes[0]) {\n    results.removeChild(results.childNodes[0]);\n  }\n}\n\n// Get the place details for a hotel. Show the information in an info window,\n// anchored on the marker for the hotel that the user selected.\nfunction showInfoWindow() {\n  var marker = this;\n  places.getDetails({placeId: marker.placeResult.place_id},\n      function(place, status) {\n        if (status !== google.maps.places.PlacesServiceStatus.OK) {\n          return;\n        }\n        infoWindow.open(map, marker);\n        buildIWContent(place);\n      });\n}\n\n// Load the place information into the HTML elements used by the info window.\nfunction buildIWContent(place) {\n  document.getElementById('iw-icon').innerHTML = '<img class=\"hotelIcon\" ' +\n      'src=\"' + place.icon + '\"/>';\n  document.getElementById('iw-url').innerHTML = '<b><a href=\"' + place.url +\n      '\">' + place.name + '</a></b>';\n  document.getElementById('iw-address').textContent = place.vicinity;\n\n  if (place.formatted_phone_number) {\n    document.getElementById('iw-phone-row').style.display = '';\n    document.getElementById('iw-phone').textContent =\n        place.formatted_phone_number;\n  } else {\n    document.getElementById('iw-phone-row').style.display = 'none';\n  }\n\n  // Assign a five-star rating to the hotel, using a black star ('&#10029;')\n  // to indicate the rating the hotel has earned, and a white star ('&#10025;')\n  // for the rating points not achieved.\n  if (place.rating) {\n    var ratingHtml = '';\n    for (var i = 0; i < 5; i++) {\n      if (place.rating < (i + 0.5)) {\n        ratingHtml += '&#10025;';\n      } else {\n        ratingHtml += '&#10029;';\n      }\n    document.getElementById('iw-rating-row').style.display = '';\n    document.getElementById('iw-rating').innerHTML = ratingHtml;\n    }\n  } else {\n    document.getElementById('iw-rating-row').style.display = 'none';\n  }\n\n  // The regexp isolates the first part of the URL (domain plus subdomain)\n  // to give a short URL for displaying in the info window.\n  if (place.website) {\n    var fullUrl = place.website;\n    var website = hostnameRegexp.exec(place.website);\n    if (website === null) {\n      website = 'http://' + place.website + '/';\n      fullUrl = website;\n    }\n    document.getElementById('iw-website-row').style.display = '';\n    document.getElementById('iw-website').textContent = website;\n  } else {\n    document.getElementById('iw-website-row').style.display = 'none';\n  }\n}\n\n/*---------------------------*/\n","undoManager":{"mark":4,"position":13,"stack":[[{"start":{"row":98,"column":17},"end":{"row":98,"column":18},"action":"remove","lines":["2"],"id":1148},{"start":{"row":98,"column":16},"end":{"row":98,"column":17},"action":"remove","lines":["2"]}],[{"start":{"row":98,"column":16},"end":{"row":98,"column":17},"action":"insert","lines":["1"],"id":1149},{"start":{"row":98,"column":17},"end":{"row":98,"column":18},"action":"insert","lines":["6"]}],[{"start":{"row":66,"column":483},"end":{"row":66,"column":502},"action":"remove","lines":["View on Google Maps"],"id":1150},{"start":{"row":66,"column":483},"end":{"row":66,"column":484},"action":"insert","lines":["F"]},{"start":{"row":66,"column":484},"end":{"row":66,"column":485},"action":"insert","lines":["i"]},{"start":{"row":66,"column":485},"end":{"row":66,"column":486},"action":"insert","lines":["n"]},{"start":{"row":66,"column":486},"end":{"row":66,"column":487},"action":"insert","lines":["d"]}],[{"start":{"row":66,"column":487},"end":{"row":66,"column":488},"action":"insert","lines":[" "],"id":1151},{"start":{"row":66,"column":488},"end":{"row":66,"column":489},"action":"insert","lines":["o"]},{"start":{"row":66,"column":489},"end":{"row":66,"column":490},"action":"insert","lines":["u"]},{"start":{"row":66,"column":490},"end":{"row":66,"column":491},"action":"insert","lines":["t"]}],[{"start":{"row":66,"column":491},"end":{"row":66,"column":492},"action":"insert","lines":[" "],"id":1152},{"start":{"row":66,"column":492},"end":{"row":66,"column":493},"action":"insert","lines":["m"]},{"start":{"row":66,"column":493},"end":{"row":66,"column":494},"action":"insert","lines":["o"]},{"start":{"row":66,"column":494},"end":{"row":66,"column":495},"action":"insert","lines":["r"]},{"start":{"row":66,"column":495},"end":{"row":66,"column":496},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":0},"end":{"row":8,"column":0},"action":"remove","lines":["// This example uses the autocomplete feature of the Google Places API.","// It allows the user to find all hotels in a given place, within a given","// country. It then displays markers for all the hotels returned,","// with on-click details for each hotel.","","// This example requires the Places library. Include the libraries=places","// parameter when you first load the API. For example:","// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">",""],"id":1153},{"start":{"row":0,"column":0},"end":{"row":0,"column":33},"action":"insert","lines":["(Google Places API documentation)"]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["/"],"id":1154},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["/"]}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":["("],"id":1155}],[{"start":{"row":0,"column":33},"end":{"row":0,"column":34},"action":"remove","lines":[")"],"id":1156}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["F"],"id":1157},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["r"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["o"]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["m"]}],[{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"remove","lines":["m"],"id":1158},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"remove","lines":["o"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"remove","lines":["r"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":["F"]}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["E"],"id":1159},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["d"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["i"]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["t"]},{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":["e"]},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["d"]}],[{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":[" "],"id":1160},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["f"]},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["r"]},{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":["o"]},{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"insert","lines":["m"]}],[{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":[" "],"id":1161}]]},"ace":{"folds":[{"start":{"row":133,"column":22},"end":{"row":163,"column":0},"placeholder":"..."},{"start":{"row":165,"column":29},"end":{"row":195,"column":0},"placeholder":"..."}],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":45},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1565097423380}